package week9;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class trivial {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
		String ref="";
		char[]dna= {'A','G','C','T'};
			/*	try {	
			 * PrintWriter pw;
					pw = new PrintWriter("C:/Users/bohee/Desktop/a.txt");
					
					int a=5;
					int c=0;
					int count=0;
					  for(int i=0; i<500000; i++) {
				         
				    //두번의 중복은 허용 합니다
				    //즉 같은 값이 3번 나올수 있습니다.
				    //aagggt 처럼 g가 3번까지 반복이 가능하며
				    // 4개이상 반복되어 나올수 없는 것 입니다.
				          
				            c= (int) (Math.random()*4);
				            if(a==c) {// 바로 직전의 값과 같다면 중복되므로 count를 올려줄지 중복을 제거 할지 결정합니다.
				            	if(count>=2) {
				            		//중복count가 이미 2라면 , 즉 중복으로 3번 나온 후 4번째 같은 값이 나오게 되면 값을 바꿉니다.
				            		while(a==c) {
				            			c= (int) (Math.random()*4);
				            		}count=0;// 값을 바꾸고 나면 count를 초기화 합니다.
				            	}
				            	else {
				            	count++;// 전 값에 동일하게 중복되고, 아직 중복된 값이 3개 이하 일때는 중복을 허용하고 count를 올립니다.
				            	}
				            }
				            a=c;          
				            pw.print(dna[a]);
				        }
				        pw.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}*/
				

			      
				  BufferedReader br;
				try {
					br = new BufferedReader(new FileReader("C:/Users/bohee/Desktop/a.txt"));
						 ref=br.readLine();				            			         		 	        
				         br.close();
					
				} catch ( IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				StringBuilder strref=new StringBuilder(ref);
				System.out.println(strref.length());
			//	System.out.println(strref.charAt(1));
			//	strref.setCharAt(1, 'H');
			//	System.out.println(strref.charAt(1));
				
				Scanner sc=new Scanner(System.in);
				int k=sc.nextInt();
				int n=sc.nextInt();
				int y=sc.nextInt();
			String []shortread=makeShortread(ref, k, n,y,dna);
			makeMyDna(strref,k,n,y,dna,shortread);
				sc.close();
				
				
			
	}
	static void makeMyDna(StringBuilder ref,int k,int n,int y,char[] dna,String[]shortread) {
		int indexcount=0;
		int count=0;
		boolean countb=false;
		int v=0;
		for(int stindex=0;stindex<n;stindex++) {
			v=indexcount;
			countb=true;
			for(int stl=0;stl<k;stl++,v++) {
				if(shortread[stindex].charAt(stl)!=ref.charAt(v)) {
					count++;
					if(count>y) {
						countb=false;
						break;
					}
				}
			}
			if(countb) {
				
			}
			indexcount++;
		}
		
		
		
	
		
		
	}
	static String[] makeShortread(String ref,int k,int n,int y,char[] dna) {
		int l=500000-k;
		String [] shortread=new String[n];
		StringBuilder strtmp;	
		int randomtmp;
		int yindex;
		int tmp = 0;
		for(int i=0;i<n;i++){
			randomtmp=(int)(Math.random()*l);
			System.out.println(randomtmp);
			shortread[i]="";
			for(int j=0;j<k;j++) {
				shortread[i]+=ref.charAt(randomtmp+j);
			}System.out.println(shortread[i]);
			strtmp=new StringBuilder(shortread[i]);
			//1System.out.println("builder : "+strtmp);
			
			for(int m=0;m<y;m++) {
				yindex=(int)(Math.random()*k);
				//System.out.println("여기 바꾸자  : "+yindex);
				while(dna[tmp]==shortread[i].charAt(yindex)) {
				tmp=(int)(Math.random()*4);
				}
				strtmp.setCharAt(yindex, dna[tmp]);
				shortread[i]=strtmp.toString();
				
			//	System.out.println("바뀐 값 :"+shortread[i]);
			}
			
		}
		// 지금은 최소 0자리, 최대 3자리가 다를 수 있습니다.(랜덤으로 하기에 확률 적으로 최소보다는 최대가 나올 확률이 높습니다.)
		
		
		for(int i=0;i<n;i++) {
			System.out.println(shortread[i]);
		}
		return shortread;
		
	}

}
