package algorithm_dnaprj;

//2015112120 임성두
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class makemydna {

	public static void make() {
		// TODO Auto-generated method stub
	
		String ref ="";
		char[]dna= {'A','G','C','T'};
		Scanner sc=new Scanner(System.in);
		int k=sc.nextInt();//30
		int n=sc.nextInt();//20000	
		writefile(dna);// 50만길이의 dna를 파일에 씁니다
		ref=inputfile();// 위에서 쓴 파일을 불러옵니다
		StringBuilder strref=new StringBuilder(ref);
		String []shortread=makeShortread(strref, k, n,10,dna);
		writeShortread(shortread);// shortread를 파일에 씁니다
		
		sc.close();
		
	}
	
	
	// 맨 밑에부터 두개의 메서드를 제외하면 전부 file 입출력 메서드로 큰 의미를 가지지 않습니다.
	// 맨 밑 두개는 makeShortread 메서드와 makeMyDna 메서드를 말합니다
	
	


	static String inputfile() {
		 BufferedReader br;
		 String ref="";
			try {
				br = new BufferedReader(new FileReader("C:/Users/bohee/Desktop/input.txt"));
					 ref=br.readLine();				            			         		 	        
			         br.close();
			} catch ( IOException e) {
				e.printStackTrace();
			}	
			return ref;
	}
	static void writeShortread(String[]shortread) {
		try {	
			  PrintWriter pw;
					pw = new PrintWriter("C:/Users/bohee/Desktop/shortread.txt");
					for(int i=0;i<shortread.length;i++) {
					pw.println(shortread[i]);}
				        pw.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
		System.out.println("end writeShortread");
	}
	
	
	
	
	
	
	
	static StringBuilder makeMyDna(StringBuilder ref,int k,int n,double y,char[] dna,String[]shortread) {
		//int indexcount=0;
		int count=0;
	//	boolean countb=false;
		//int stindex=0;
		int tmp;
		//int rl=ref.length();
		int rlt=ref.length()-k+1;
		int [][]store=new int[(int)y][2];
		for(int stindex=0;stindex<n;stindex++) {
			if(stindex%2000==0) {System.out.print(stindex+" ");}
		test:for(int v=0;v<=rlt;v++) {
			
			tmp=v;
			//countb=true;
			count=0;
			for(int stl=0;stl<k;stl++,tmp++) {
				if(shortread[stindex].charAt(stl)!=ref.charAt(tmp)) {
					count++;
					if(count>y) {
						continue test;
					}
					store[count-1][0]=stl;
					store[count-1][1]=tmp;
				}
			}

				for(int i=0;i<count;i++)
				{//System.out.println(store[i][1]+","+store[i][0]);
					ref.setCharAt(store[i][1], shortread[stindex].charAt(store[i][0]));}
				break;
			}
		}
	
		return ref;
		
	}
	static String[] makeShortread(StringBuilder ref,int k,int n,double x,char[] dna) {
	
		int rl=ref.length();
		
		int ratio=(int)(rl*(x/100));
		int tmp2;
		
		
		ArrayList<Integer>a=new ArrayList<>();
		for(int i=0;i<ratio;i++) {
			tmp2=(int)(Math.random()*rl);
			while(a.contains(tmp2)) {
				tmp2=(int)(Math.random()*rl);
			}a.add(tmp2);
			
		}
	
		char t;
		char diff;
		for(int i=0;i<ratio;i++) {
			t=ref.charAt(a.get(i));
			diff=dna[(int)(Math.random()*4)];
			while(t==diff) {
				diff=dna[(int)(Math.random()*4)];
			}
			//System.out.println(a.get(i)+": "+t+","+diff);
		ref.setCharAt(a.get(i),diff);// 이 ref는 x%다른 mydna입니다.
		}//System.out.println(ref);
		
		int l=rl-k;
		String [] shortread=new String[n];
		int randomtmp;		
		for(int i=0;i<n;i++){
			randomtmp=(int)(Math.random()*l);
			//System.out.println(randomtmp);
			shortread[i]=ref.substring(randomtmp, randomtmp+k);
			
		}

		try {	
			  PrintWriter pw;
					pw = new PrintWriter("C:/Users/bohee/Desktop/mydna.txt");
					
					pw.print(ref);
					
				        pw.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
		System.out.println("mydna 쓰기 완료");
return shortread;		
		
	}

}
